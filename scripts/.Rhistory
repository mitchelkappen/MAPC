legend = TRUE
p <- ggplot(emm_df, aes(x = pictureCondition, y = response, group = stimCondition)) +
geom_point(aes(color = stimCondition), size = 3, position = position_dodge(pd)) +
geom_errorbar(aes(ymin = response - SE, ymax = response + SE, color = stimCondition), width = 0.2, position = position_dodge(pd)) +
labs(x = "Picture Condition",
y = "Estimated Marginal Means",
title = "Estimated Marginal Means for each Picture Condition by Stim Condition",
color = "Stim Condition") +
scale_colour_manual(values=cbPalette) +
legend = TRUE +
plot_theme_apa()
p <- ggplot(emm_df, aes(x = pictureCondition, y = response, group = stimCondition)) +
geom_point(aes(color = stimCondition), size = 3, position = position_dodge(pd)) +
geom_errorbar(aes(ymin = response - SE, ymax = response + SE, color = stimCondition), width = 0.2, position = position_dodge(pd)) +
labs(x = "Picture Condition",
y = "Estimated Marginal Means",
title = "Estimated Marginal Means for each Picture Condition by Stim Condition",
color = "Stim Condition") +
scale_colour_manual(values=cbPalette) +
plot_theme_apa() +
theme(legend.position = "bottom") #Change the position of the legend
p + annotate(geom="text", x= 1.2, y= 14396, label= '*', size = 10) # Add the star to the plot## Significance
p <- p + annotate(geom="text", x= 1.2, y= 14396, label= '*', size = 10) # Add the star to the plot## Significance
savePlot(p, "StimxPic") # Display and save plot
## Different plot #####
library(yarrr)
ggpirate(emm_df, aes(x = pictureCondition, y = response, fill = stimCondition),
palette = cbPalette, point.args = list(size = 3, alpha = 0.5), theme = theme_minimal())
library(ggpirate)
pirateplot(formula = RT1 ~ stimCondition*pictureCondition,
data = inputData,
theme = 1,
main = "theme = 1")
# Defining custom colors
custom.colors <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
# Create the pirate plot
pirateplot(formula = RT1 ~ stimCondition * pictureCondition,
data = inputData,
palette = custom.colors,  # use custom colors
xlab = "Stim Condition and Picture Condition",
ylab = "RT1",
main = "Comparison of RT1 across Stim Conditions and Picture Conditions",
theme = 3,  # try a different theme
point.shape = 19,  # use filled circles for the points
point.size = 2,  # increase the size of the points
point.alpha = .8,  # make the points slightly transparent
bean.alpha = .6,  # make the beans (violin plots) slightly transparent
inf.method = "boxplot",  # show the boxplot inside each bean
inf.alpha = .6,  # make the boxplot slightly transparent
inf.fill = NA,  # don't fill the boxplot
inf.colour = "black",  # outline the boxplot in black
inf.linewidth = 1,  # make the boxplot lines slightly thicker
av.line = TRUE,  # show a line for the average of each group
av.linetype = "dashed",  # make the average line dashed
av.linecol = "red",  # make the average line red
cap.beans = TRUE,  # add caps (ends) to the beans
back.col = "gray90"  # make the background a light gray
)
# Create the pirate plot
pirateplot(formula = RT1 ~ stimCondition * pictureCondition,
data = inputData,
palette = cbPalette,  # use custom colors
xlab = "Stim Condition and Picture Condition",
ylab = "RT1",
main = "Comparison of RT1 across Stim Conditions and Picture Conditions",
theme = 3,  # try a different theme
point.shape = 19,  # use filled circles for the points
point.size = 2,  # increase the size of the points
point.alpha = .8,  # make the points slightly transparent
bean.alpha = .6,  # make the beans (violin plots) slightly transparent
inf.method = "boxplot",  # show the boxplot inside each bean
inf.alpha = .6,  # make the boxplot slightly transparent
inf.fill = NA,  # don't fill the boxplot
inf.colour = "black",  # outline the boxplot in black
inf.linewidth = 1,  # make the boxplot lines slightly thicker
av.line = TRUE,  # show a line for the average of each group
av.linetype = "dashed",  # make the average line dashed
av.linecol = "red",  # make the average line red
cap.beans = TRUE,  # add caps (ends) to the beans
back.col = "gray90"  # make the background a light gray
)
# Create the pirate plot
pirateplot(formula = RT1 ~ stimCondition * pictureCondition,
data = inputData,
pal = cbPalette,  # use custom colors
xlab = "Stim Condition and Picture Condition",
ylab = "RT1",
main = "Comparison of RT1 across Stim Conditions and Picture Conditions",
theme = 3,  # try a different theme
point.shape = 19,  # use filled circles for the points
point.size = 2,  # increase the size of the points
point.alpha = .8,  # make the points slightly transparent
bean.alpha = .6,  # make the beans (violin plots) slightly transparent
inf.method = "boxplot",  # show the boxplot inside each bean
inf.alpha = .6,  # make the boxplot slightly transparent
inf.fill = NA,  # don't fill the boxplot
inf.colour = "black",  # outline the boxplot in black
inf.linewidth = 1,  # make the boxplot lines slightly thicker
av.line = TRUE,  # show a line for the average of each group
av.linetype = "dashed",  # make the average line dashed
av.linecol = "red",  # make the average line red
cap.beans = TRUE,  # add caps (ends) to the beans
back.col = "gray90"  # make the background a light gray
)
# Create the pirate plot
pirateplot(formula = RT1 ~ stimCondition * pictureCondition,
data = inputData,
pal = cbPalette,  # use custom colors
xlab = "Stim Condition and Picture Condition",
ylab = "RT1",
main = "Comparison of RT1 across Stim Conditions and Picture Conditions",
theme = 3  # try a different theme
)
# Create the pirate plot
pirateplot(formula = RT1 ~ stimCondition * pictureCondition,
data = inputData,
pal = cbPalette,  # use custom colors
xlab = "Stim Condition and Picture Condition",
ylab = "RT1",
main = "Comparison of RT1 across Stim Conditions and Picture Conditions",
theme = 2  # try a different theme
)
# Create the pirate plot
pirateplot(formula = RT1 ~ stimCondition * pictureCondition,
data = inputData,
pal = cbPalette,  # use custom colors
xlab = "Stim Condition and Picture Condition",
ylab = "RT1",
main = "Comparison of RT1 across Stim Conditions and Picture Conditions",
theme = 4  # try a different theme
)
# Create the pirate plot
pirateplot(formula = RT1 ~ stimCondition * pictureCondition,
data = inputData,
pal = cbPalette,  # use custom colors
xlab = "Stim Condition and Picture Condition",
ylab = "RT1",
main = "Comparison of RT1 across Stim Conditions and Picture Conditions",
theme = 5  # try a different theme
)
# Create the pirate plot
pirateplot(formula = RT1 ~ stimCondition * pictureCondition,
data = inputData,
pal = cbPalette,  # use custom colors
xlab = "Stim Condition and Picture Condition",
ylab = "RT1",
main = "Comparison of RT1 across Stim Conditions and Picture Conditions",
theme = 2  # try a different theme
)
##### Mitchel Effect Size #####
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
emmeans0.1
effSummary
##### Mitchel Effect Size #####
# Create empty forestplot df
forestdf <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Outcome" = character(0), "D" = numeric(0), "Lower" = numeric(0), "Upper" = numeric(0), "Group" = character(0)))
forestdf = data.frame(Outcome=character(0), Group=character(0),  effectsize=numeric(0), Lower=numeric(0), Upper=numeric(0), Beta=numeric(0), SE=numeric(0), t=numeric(0))
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = 'F0'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, Beta, SE, t)
}
forestdf
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = 'Stim vs Sham'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, Beta, SE, t)
}
forestdf$Outcome
##### Mitchel Effect Size #####
# Create empty forestplot df
forestdf <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Outcome" = character(0), "D" = numeric(0), "Lower" = numeric(0), "Upper" = numeric(0), "Group" = character(0)))
forestdf = data.frame(Outcome=character(0), Group=character(0),  effectsize=numeric(0), Lower=numeric(0), Upper=numeric(0), Beta=numeric(0), SE=numeric(0), t=numeric(0))
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = 'Stim vs Sham'
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, Beta, SE, t)
}
forestdf
##### Mitchel Effect Size #####
# Create empty forestplot df
forestdf <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Outcome" = character(0), "D" = numeric(0), "Lower" = numeric(0), "Upper" = numeric(0), "Group" = character(0)))
forestdf = data.frame(Outcome=character(0), Group=character(0),  effectsize=numeric(0), Lower=numeric(0), Upper=numeric(0), Beta=numeric(0), SE=numeric(0), t=numeric(0))
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = as.character(effSummary$pictureCondition[i])
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, Beta, SE, t)
}
forestdf
# Make forest
# you can do the factoring here
forestdf$Outcome = factor(forestdf$Outcome, levels = c("ME", "SS", "FB", "TB"))
# Make them numeric
forestdf$effectsize = round(as.numeric(forestdf$effectsize), digits = 2)
forestdf$Lower = round(as.numeric(forestdf$Lower), digits = 2)
forestdf$Upper = round(as.numeric(forestdf$Upper), digits = 2)
forestdf$Beta = round(as.numeric(forestdf$Beta), digits = 2)
forestdf$SE = round(as.numeric(forestdf$SE), digits = 2)
##### Mitchel Effect Size #####
# Create empty forestplot df
forestdf <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Outcome" = character(0), "D" = numeric(0), "Lower" = numeric(0), "Upper" = numeric(0), "Group" = character(0)))
forestdf = data.frame(Outcome=character(0), Group=character(0),  effectsize=numeric(0), Lower=numeric(0), Upper=numeric(0), Beta=numeric(0), SE=numeric(0), t=numeric(0))
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = as.character(effSummary$pictureCondition[i])
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$lower.CL[i] * -1 # Inverted
Lower = effSummary$upper.CL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, Beta, SE, t)
}
# Make forest
# you can do the factoring here
forestdf$Outcome = factor(forestdf$Outcome, levels = c("ME", "SS", "FB", "TB"))
forestdf
effSummary
effSummary$lower.CL
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
effSummary
eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]]))
##### Mitchel Effect Size #####
# Create empty forestplot df
forestdf <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Outcome" = character(0), "D" = numeric(0), "Lower" = numeric(0), "Upper" = numeric(0), "Group" = character(0)))
forestdf = data.frame(Outcome=character(0), Group=character(0),  effectsize=numeric(0), Lower=numeric(0), Upper=numeric(0), Beta=numeric(0), SE=numeric(0), t=numeric(0))
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = as.character(effSummary$pictureCondition[i])
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$asymp.LCL[i] * -1 # Inverted
Lower = effSummary$asymp.UCL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, Beta, SE, t)
}
##### Mitchel Effect Size #####
# Create empty forestplot df
forestdf <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Outcome" = character(0), "D" = numeric(0), "Lower" = numeric(0), "Upper" = numeric(0), "Group" = character(0)))
forestdf = data.frame(Outcome=character(0), Group=character(0),  effectsize=numeric(0), Lower=numeric(0), Upper=numeric(0), Beta=numeric(0), SE=numeric(0), t=numeric(0))
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = as.character(effSummary$pictureCondition[i])
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$asymp.LCL[i] * -1 # Inverted
Lower = effSummary$asymp.UCL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, Beta, SE, t)
}
length(effSummary$pictureCondition )
forestdf
##### Mitchel Effect Size #####
# Create empty forestplot df
forestdf <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Outcome" = character(0), "D" = numeric(0), "Lower" = numeric(0), "Upper" = numeric(0), "Group" = character(0)))
forestdf = data.frame(Outcome=character(0), Group=character(0),  effectsize=numeric(0), Lower=numeric(0), Upper=numeric(0), Beta=numeric(0), SE=numeric(0), t=numeric(0))
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = as.character(effSummary$pictureCondition[i])
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$asymp.LCL[i] * -1 # Inverted
Lower = effSummary$asymp.UCL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, Beta, SE, t)
print(forestdf)
}
name
as.character(effSummary$pictureCondition[i])
contrastdf
i
contrastdf$estimate[i]
contrastdf$estimate
emmeans0.1
contrastdf$SE[i]
contrastdf$t.ratio[i] * -1
##### Mitchel Effect Size #####
# Create empty forestplot df
forestdf <- setNames(data.frame(matrix(ncol = 5, nrow = 0)), c("Outcome" = character(0), "D" = numeric(0), "Lower" = numeric(0), "Upper" = numeric(0), "Group" = character(0)))
forestdf = data.frame(Outcome=character(0), Group=character(0),  effectsize=numeric(0), Lower=numeric(0), Upper=numeric(0), SE=numeric(0))
# Get effect sizes
effSummary <- summary(eff_size(emmeans0.1, sigma=sigma(chosenModel[[1]]), edf=df.residual(chosenModel[[1]])))
# Cohen's D for Forest Plots
for(i in 1:length(effSummary$pictureCondition )){
name = as.character(effSummary$pictureCondition[i])
effectsize = effSummary$effect.size[i] * -1 # Inverted
Upper = effSummary$asymp.LCL[i] * -1 # Inverted
Lower = effSummary$asymp.UCL[i] * -1 # Inverted
contrastdf = summary(emmeans0.1$contrasts) # get contrasts
Beta = contrastdf$estimate[i] * -1 # Inverted
SE = contrastdf$SE[i]
t = contrastdf$t.ratio[i] * -1 # Inverted
forestdf[nrow(forestdf) + 1,] = c(name, as.character(effSummary$pictureCondition[i]), effectsize, Lower, Upper, SE)
print(forestdf)
}
forestdf
# Make forest
# you can do the factoring here
forestdf$Outcome = factor(forestdf$Outcome, levels = c("ME", "SS", "FB", "TB"))
# Make them numeric
forestdf$effectsize = round(as.numeric(forestdf$effectsize), digits = 2)
# Make them numeric
forestdf$effectsize = round(as.numeric(forestdf$effectsize), digits = 2)
forestdf$Lower = round(as.numeric(forestdf$Lower), digits = 3)
forestdf$Upper = round(as.numeric(forestdf$Upper), digits = 3)
forestdf$Beta = round(as.numeric(forestdf$Beta), digits = 3)
forestdf$SE = round(as.numeric(forestdf$SE), digits = 3)
forestdf$pvalues = round(as.numeric(collectedPvalues), digits = 3)
#define colours for dots and bars
# dotCOLS = c("#a6d8f0","#f9b282") # these are actually the bars
barCOLS = c("#56B4E9", "#E69F00")
dotCOLS = c("#56B4E9", "#E69F00")
boxlims = c(0.5, 6.5, 10.5, 12.5)
removevars = 1
dodgevar = 0.5
##### Make Forest plot ####
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Make background white
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
# Draw dashed lines to indicate category borders
geom_segment(aes(x = boxlims[3], xend = boxlims[3], y = -Inf, yend = 1.5), color = "black", linetype = "longdash") +
geom_segment(aes(x = boxlims[2], xend = boxlims[2], y = -Inf, yend = 1.5), color = "black", linetype = "longdash") +
# Draw forestplot
geom_linerange(size=8,position=position_dodge(width = dodgevar), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5)) +
geom_hline(yintercept=0, lty=2, size = 1.5) + # Draw vertical 0 line
# Create dots for effect sizes
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
# Set bar and dot colors
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
# Set figure specifics
scale_x_discrete(name="") +
scale_y_continuous(limits = c(-1, 1.5)) +
# Set orientation and theme
coord_flip()+
theme_pubr() +
plot_theme_apa()+
ylab("Effect Size (Cohen's D) with 95% CI") + # Plot is flipped, this is actually the x-axis
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
forestplot
#define colours for dots and bars
# dotCOLS = c("#a6d8f0","#f9b282") # these are actually the bars
barCOLS = c("#56B4E9", "#E69F00", "#56B4E9", "#E69F00")
dotCOLS = c("#56B4E9", "#E69F00", "#56B4E9", "#E69F00")
boxlims = c(0.5, 6.5, 10.5, 12.5)
dodgevar = 0.5
##### Make Forest plot ####
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Make background white
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
# Draw dashed lines to indicate category borders
geom_segment(aes(x = boxlims[3], xend = boxlims[3], y = -Inf, yend = 1.5), color = "black", linetype = "longdash") +
geom_segment(aes(x = boxlims[2], xend = boxlims[2], y = -Inf, yend = 1.5), color = "black", linetype = "longdash") +
# Draw forestplot
geom_linerange(size=8,position=position_dodge(width = dodgevar), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5)) +
geom_hline(yintercept=0, lty=2, size = 1.5) + # Draw vertical 0 line
# Create dots for effect sizes
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
# Set bar and dot colors
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
# Set figure specifics
scale_x_discrete(name="") +
scale_y_continuous(limits = c(-1, 1.5)) +
# Set orientation and theme
coord_flip()+
theme_pubr() +
plot_theme_apa()+
ylab("Effect Size (Cohen's D) with 95% CI") + # Plot is flipped, this is actually the x-axis
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
forestplot
forestdf
pvalues = c() # Create a variable to store all p-values to correct later
pvalues  = append(pvalues ,summary(emmeans0.1$contrasts)$p.value) # Add pvalues to dataframe to later correct all
# add p valuse
# Correct P values SPEECH ######
names = c("ME", "SS", "FB", "TB")
ps = list()
ps[names] = p.adjust(pvalues, method = "fdr", length(pvalues)) # Create list containing fdr corrected pvalues
collectedPvalues = ps
collectedPvalues
forestdf$pvalues = round(as.numeric(collectedPvalues), digits = 3)
#define colours for dots and bars
# dotCOLS = c("#a6d8f0","#f9b282") # these are actually the bars
barCOLS = c("#56B4E9", "#E69F00", "#56B4E9", "#E69F00")
dotCOLS = c("#56B4E9", "#E69F00", "#56B4E9", "#E69F00")
boxlims = c(0.5, 6.5, 10.5, 12.5)
dodgevar = 0.5
##### Make Forest plot ####
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Make background white
geom_rect(aes(xmin = boxlims[1], xmax = boxlims[4], ymin = -Inf, ymax = Inf),
fill = "gray100", alpha = 0.2, linetype = "blank") +
# Draw dashed lines to indicate category borders
geom_segment(aes(x = boxlims[3], xend = boxlims[3], y = -Inf, yend = 1.5), color = "black", linetype = "longdash") +
geom_segment(aes(x = boxlims[2], xend = boxlims[2], y = -Inf, yend = 1.5), color = "black", linetype = "longdash") +
# Draw forestplot
geom_linerange(size=8,position=position_dodge(width = dodgevar), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5)) +
geom_hline(yintercept=0, lty=2, size = 1.5) + # Draw vertical 0 line
# Create dots for effect sizes
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
# Set bar and dot colors
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
# Set figure specifics
scale_x_discrete(name="") +
scale_y_continuous(limits = c(-1, 1.5)) +
# Set orientation and theme
coord_flip()+
theme_pubr() +
plot_theme_apa()+
ylab("Effect Size (Cohen's D) with 95% CI") + # Plot is flipped, this is actually the x-axis
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
forestplot
##### Make Forest plot ####
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Draw forestplot
geom_linerange(size=8,position=position_dodge(width = dodgevar), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5)) +
geom_hline(yintercept=0, lty=2, size = 1.5) + # Draw vertical 0 line
# Create dots for effect sizes
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
# Set bar and dot colors
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
# Set figure specifics
scale_x_discrete(name="") +
scale_y_continuous(limits = c(-1, 1.5)) +
# Set orientation and theme
coord_flip()+
theme_pubr() +
plot_theme_apa()+
ylab("Effect Size (Cohen's D) with 95% CI") + # Plot is flipped, this is actually the x-axis
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
forestplot
##### Make Forest plot ####
forestplot <- ggplot(forestdf, aes(x=Outcome, y=effectsize, ymin=Upper, ymax=Lower,col=Group,fill=Group, group=Group)) +
# Draw forestplot
geom_linerange(size=8,position=position_dodge(width = dodgevar), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5)) +
geom_hline(yintercept=0, lty=2, size = 1.5) + # Draw vertical 0 line
# Create dots for effect sizes
geom_point(size=4, shape=21, colour= ifelse(forestdf$pvalues < .05, "black", "white"), alpha = ifelse(forestdf$pvalues < .05, 1, 0.5),
stroke = 1.4, position=position_dodge(width = dodgevar)) +
# Set bar and dot colors
scale_fill_manual(values=barCOLS)+
scale_color_manual(values=dotCOLS)+
# Set figure specifics
scale_x_discrete(name="") +
scale_y_continuous(limits = c(-.6, .8)) +
# Set orientation and theme
coord_flip()+
theme_pubr() +
plot_theme_apa()+
ylab("Effect Size (Cohen's D) with 95% CI") + # Plot is flipped, this is actually the x-axis
theme(legend.position = "bottom", legend.text = element_text(size = 18), legend.title = element_text(size = 18))
forestplot
savePlot(forestplot, "forestPlot") # Display and save plot
